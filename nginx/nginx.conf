# Define o usu√°rio que o NGINX vai rodar (padr√£o √© 'nginx' no Alpine/Debian)
user  nginx;

# Define quantos processos de worker ser√£o criados (auto = usa n√∫cleos da m√°quina)
worker_processes auto;

# Local de logs de erros
error_log /var/log/nginx/error.log warn;

# Arquivo de PID do processo master do NGINX
pid /var/run/nginx.pid;

events {
    # N√∫mero m√°ximo de conex√µes simult√¢neas por worker
    worker_connections 1024;
}

http {
    # -----------------------
    # üîπ Upstreams (clusters)
    # -----------------------
    # Cada upstream representa um microservi√ßo e pode ter v√°rias r√©plicas.
    # Exemplo: basta adicionar mais "server" apontando para containers diferentes.

    upstream auth_backend {
        server auth-service:3000;
    }

    upstream contracts_backend {
        server contracts-service:3000;
    }

    upstream products_backend {
        server products-service:3000;
    }

    upstream services_backend {
        server services-service:3000;
    }

    upstream orders_backend {
        server orders-service:3000;
    }

    upstream clients_backend {
        server clients-service:3000;
    }

    upstream suppliers_backend {
        server suppliers-service:3000;
    }

    upstream files_backend {
        server files-service:3000;
    }

    # -----------------------
    # üîπ Servidor principal
    # -----------------------
    server {
        # Porta exposta (externa)
        listen 80 default_server;

        # Nome do host (pode trocar por dom√≠nio real)
        server_name _;

        # -----------------------
        # üîπ Rotas para APIs
        # -----------------------
        location /auth/ {
            proxy_pass http://auth_backend/;
        }

        location /contracts/ {
            proxy_pass http://contracts_backend/;
        }

        location /products/ {
            proxy_pass http://products_backend/;
        }

        location /services/ {
            proxy_pass http://services_backend/;
        }

        location /orders/ {
            proxy_pass http://orders_backend/;
        }

        location /clients/ {
            proxy_pass http://clients_backend/;
        }

        location /suppliers/ {
            proxy_pass http://suppliers_backend/;
        }

        location /files/ {
            proxy_pass http://files_backend/;
        }

        # -----------------------
        # üîπ Configura√ß√£o padr√£o de proxy
        # -----------------------
        proxy_http_version 1.1;

        # Permite WebSockets
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';

        # Mant√©m host original
        proxy_set_header Host $host;

        # Desabilita cache quando h√° upgrade de conex√£o
        proxy_cache_bypass $http_upgrade;
    }
}
